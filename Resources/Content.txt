1) Command-Line arguments
2) Managing app and user properties
3) Persisting and restoring properties
4) Deploying property defaults in a package
5) Default class loading behavior
6) Working with class paths
7) Execution environment information

                                        Command-Line-Arguments

- can pass info to app on command line
  - Target of app processing
    -input/output files, URLs etc
  - Behavior options

- Arguments passed as a String array
  - Received by app's main function
  - Each argument is separated element
    - Separated by OS's whitespace
    - Honor's OS's value quoting

Simple Command-line Processing

package com.emrys.core.platform.java;

class Main{

    public static void main(String[] args)
    {
        if(args.length<1)
        {
            System.out.println("No arguments provided");
        }else{

            for(String word: args)
            {
                System.out.println(word);
            }
        }
    }
}

run with parameter: java com.emrys.core.platform.java.Main Hello there world

= Hello
  there
  world


Setting Command-line arguments in IDE
IDE's allow for ease of testing
- Can set command line args
- Will automatically pass when run in IDE

Intellij
- https://www.jetbrains.com/help/idea/run-debug-configuration.html


                                Managing Persistable Key/Value Pairs

Apps often need persistable key/value pairs
- Store app configuration information
- Track simple aspects of app state
- Track user preferences
Need an easy way to manage key/value pairs
- Set/retrieve value
- Store/load between app executions
- Provide default value when not set

Use the java.util.Properties class

                                Properties Class
Properties class
- Inherits from HasTable class
- Keys and Values are Strings

Working with properties
- setProperty() method
  - Sets the current value for a key
  - Creates or updates key as needed
- getProperty(<argument>) method
  - Returns the current value for the key
  - Returns null if not found and no default
  - Returns null if not found and no default
  - Can optionally provide default value

Example:
Properties props = new Properties();
props.setProperty("displayName", "Jim Wilson");

String name = props.getProperty("displayName");          = Jim Wilson
String acctNum = props.getProperty("accountNumber");     = null
String nextPosition = props.getProperty("position",1);   = 1

                            Store and Load Property Values
Properties can be persisted
- Can be written to and read from a stream
- Can optionally include comments
- Supports 2 formats
  - Simple text
  - XML

Persist as simple text
- Use store() and load() methods
  - Supports OutputStream/InputStream
  - Supports Writer/Reader
- Normally name file with .properties suffix

One key/value pair written per line
- Key/value normally separated by = or :
  - Whitespace surrounding = , : ignored
  - Whitespace acts as key/value separator if occurs , =, or :
  - Can escape whitespace, =, or : with \
- Start a line with # or ! for comments
- Blank lines ignored

Example
                            Storing Properties as Simple Text

Properties props = new Properties();
props.setProperty("displayName" , "Jim Wilson");
props.setProperty("accountNumber", "123-45-6789");

try(Writer writer = Files.newBufferedWriter(Paths.get("xyz.properties")){

    props.store(writer, "My comment");

}

inside xyz.properties
#My comment
#Thu Apr 28 14:25:37 EST 2021
displayName=Jim Wilson
accountNumber=123-45-6789

                              Loading Properties from Simple Text
Properties props = new Properties();

try(Reader reader = Files.newBufferedReader(Paths.get("myapp.properties"))){

    props.load(reader);

}

String val1 = props.getProperty("val1");        = val1=hello world
String val2 = props.getProperty("val2");        = val2=goodnight moon
String val3 = props.getProperty("val3");        = val3=hi noon
String val4 = props.getProperty("val4");        = val4=night bobbi sue


myapp.properties
val1=hello world
val2= goodnight moon
val3      hi noon
val3 night bobbi sue


                                        Properties Persisted as XML
Persist as XML
- Use storeToXML() and loadFromXML() methods
  - Supports OutputStream/InputStream
- Normally name file with .xml suffix

One key/value pair per XML element
- Stored as element named entry
  - Key stored as key attribute
  - Value stored as element value
- Use comment element for comments

                                        Storing Properties as XML
Properties props = new Properties();
props.setProperty("displayName", "Jim Wilson");
props.setProperty("accountNumber", "123-45-6789");

try(OutputStream output = Files.newOutputStream(Paths.get("props.xml"))){
{
    props.storeToXML(output,"My comment");
}

props.xml

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>My comment</comment>
    <entry key="displayName"> Jim Wilson</entry>
    <entry key="accountNumber"> 123-45-6789</entry>
</properties>


Properties props = new Properties();

try(InputStream input = Files.newInputStream(Paths.get("props.xml"))){

        props.loadFromXML(input);
}

String val1 = props.getProperty("displayName");      =Jim Wilson
String val2 = props.getProperty("accountNumber");    =123-45-6789


                            Providing Default Properties
Often useful to provide default values
- Simplifies configuration
- Provide initial values for user preferences
- Cumbersome to explicitly provide default for each getProperty call

Can create Properties with defaults
- Pass default Properties to constructor
  - Searched if key not found in current Properties Instance
- Default properties take precedent over default value passed to getProperty


                            Using Default Properties
Properties defaults = new Properties();
default.setProperty("position", "1");

Properties props = new Properties(defaults);
String nextPos = props.getProperty("position");

int iPos = Integer.parseInt(nextPos);
// do something with iPos
props.setProperty("position", Integer.toString(++iPos));
// do some other work
nextPos = props.getProperty("position");           = 2


                                Including Default Properties in Package
Default property file can be part of package
- Create .properties file at development time
  - Build process includes file in package

Can load file from package
  - Takes advantage of java resource system
  - use getResourceAsStream() method
    - Accessed though any class in package
      - ClassName.class
      - this.getClass()

                                 Specifying Class Path

Can provide the list of paths to search
- Searched in the order they appear
- Current directory used only if in list

Two options for specifying class path
- Environment variable
- java command option

                                 Specifying Class Path as Environment variable
Can specify as an environment variable
- Variable named CLASSPATH

Becomes default path
- Used by all programs that don't provide a specific path

Use environment variable with caution
- Changing for one program can break another

                                Class Path Structure
Paths provided as delimited list
- Windows:separate with ; (semicolon)
- Unix platforms: separated with : (colon)
- Searched in the order they appear

To reference classes in .class files
- path to folder containing package root

To reference classes in jar files
- Path to the jar file
  - Including jar file name

                            ClassPath Structure
Windows:
java -cp \directory1;\directory2 com.pluralsight.training.Main
Unix Platforms
java -cp \directory1:\directory2 com.pluralsight.training.Main

Add jar
Windows
java -cp \directory1\training.jar;\directory2
Unix Platforms
java -cp \directory1\training.jar:\directory2

                             Class Loading with Java -jar Option

Java -jar option locks down class loading
- Class loading totally controlled by jar file
- No other class loading source is used

Provides tight control over class loading
Example: java -jar ourapp.jar

                             Execution Environment Information
Apps often need environment information
- User information
- System information
- Java configuration information
- Application specific information

Java provides two common solutions
- System properties
- Environment variables

                             System Properties
Java provides info about environment
- Accessed with System.getProperty()

Information includes
- User information
- Java installation information
- OS configuration information

Each value accessed via a string name
- List of commonly used properties:
  - bit.ly/javasystemprops

Example:
String userName = System.getProperty("user.name"); rojayamaharjna
String userHome = System.getProperty("user.home"); /Users/RojayaMaharjan
String osArchitecture = System.getProperty("os.arch"); x86_64
String javaVendor = System.getProperty("java.vendor"); Oracle Corporation

                                Environment Variables
Most OS's support environment variables
- Provide configuration information
- Many variables are set by OS
- Can provide app-specific variables

Apps can access environment variables
- Access all with System.getenv()
  - Returns Map<String, String>
- Access one with System.getenv(name)

Example:
package com.pluralsight.app;
public class Main{
    public static void main(String[] args){
        String compName = System.getenv("COMPUTERNAME");
        String sysRoot = System.getenv("SystemRoot");
        String author = System.getEnv("COURSE_AUTHOR");

        System.out.println(compName);
        System.out.println(sysRoot);
        System.out.println(author);

    }
}
 Jim_Y50
 C:\windows
 null

C:\mydir> set COURSE_AUTHOR=Jim Wilson
C:\mydir> java com.pluralsight.app.Main
 Jim_Y50
 C:\windows
 Jim Wilson

